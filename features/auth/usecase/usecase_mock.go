// Code generated by mockery v2.30.1. DO NOT EDIT.

package usecase

import (
	jwt "github.com/golang-jwt/jwt/v4"
	mock "github.com/stretchr/testify/mock"

	models "github.com/vasapolrittideah/accord/models"

	uuid "github.com/google/uuid"
)

// MockAuthUseCase is an autogenerated mock type for the AuthUseCase type
type MockAuthUseCase struct {
	mock.Mock
}

type MockAuthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUseCase) EXPECT() *MockAuthUseCase_Expecter {
	return &MockAuthUseCase_Expecter{mock: &_m.Mock}
}

// ParseToken provides a mock function with given fields: tokenString
func (_m *MockAuthUseCase) ParseToken(tokenString string) (*jwt.MapClaims, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.MapClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.MapClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockAuthUseCase_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockAuthUseCase_Expecter) ParseToken(tokenString interface{}) *MockAuthUseCase_ParseToken_Call {
	return &MockAuthUseCase_ParseToken_Call{Call: _e.mock.On("ParseToken", tokenString)}
}

func (_c *MockAuthUseCase_ParseToken_Call) Run(run func(tokenString string)) *MockAuthUseCase_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthUseCase_ParseToken_Call) Return(_a0 *jwt.MapClaims, _a1 error) *MockAuthUseCase_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_ParseToken_Call) RunAndReturn(run func(string) (*jwt.MapClaims, error)) *MockAuthUseCase_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: userId, userRefreshToken
func (_m *MockAuthUseCase) RefreshToken(userId uuid.UUID, userRefreshToken string) (*Tokens, error) {
	ret := _m.Called(userId, userRefreshToken)

	var r0 *Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (*Tokens, error)); ok {
		return rf(userId, userRefreshToken)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *Tokens); ok {
		r0 = rf(userId, userRefreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(userId, userRefreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthUseCase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - userId uuid.UUID
//   - userRefreshToken string
func (_e *MockAuthUseCase_Expecter) RefreshToken(userId interface{}, userRefreshToken interface{}) *MockAuthUseCase_RefreshToken_Call {
	return &MockAuthUseCase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", userId, userRefreshToken)}
}

func (_c *MockAuthUseCase_RefreshToken_Call) Run(run func(userId uuid.UUID, userRefreshToken string)) *MockAuthUseCase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(string))
	})
	return _c
}

func (_c *MockAuthUseCase_RefreshToken_Call) Return(_a0 *Tokens, _a1 error) *MockAuthUseCase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_RefreshToken_Call) RunAndReturn(run func(uuid.UUID, string) (*Tokens, error)) *MockAuthUseCase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SignIn provides a mock function with given fields: payload
func (_m *MockAuthUseCase) SignIn(payload SignInRequest) (*Tokens, error) {
	ret := _m.Called(payload)

	var r0 *Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(SignInRequest) (*Tokens, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(SignInRequest) *Tokens); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(SignInRequest) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockAuthUseCase_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - payload SignInRequest
func (_e *MockAuthUseCase_Expecter) SignIn(payload interface{}) *MockAuthUseCase_SignIn_Call {
	return &MockAuthUseCase_SignIn_Call{Call: _e.mock.On("SignIn", payload)}
}

func (_c *MockAuthUseCase_SignIn_Call) Run(run func(payload SignInRequest)) *MockAuthUseCase_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(SignInRequest))
	})
	return _c
}

func (_c *MockAuthUseCase_SignIn_Call) Return(_a0 *Tokens, _a1 error) *MockAuthUseCase_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_SignIn_Call) RunAndReturn(run func(SignInRequest) (*Tokens, error)) *MockAuthUseCase_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignOut provides a mock function with given fields: userId
func (_m *MockAuthUseCase) SignOut(userId uuid.UUID) (*models.User, error) {
	ret := _m.Called(userId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_SignOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignOut'
type MockAuthUseCase_SignOut_Call struct {
	*mock.Call
}

// SignOut is a helper method to define mock.On call
//   - userId uuid.UUID
func (_e *MockAuthUseCase_Expecter) SignOut(userId interface{}) *MockAuthUseCase_SignOut_Call {
	return &MockAuthUseCase_SignOut_Call{Call: _e.mock.On("SignOut", userId)}
}

func (_c *MockAuthUseCase_SignOut_Call) Run(run func(userId uuid.UUID)) *MockAuthUseCase_SignOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthUseCase_SignOut_Call) Return(_a0 *models.User, _a1 error) *MockAuthUseCase_SignOut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_SignOut_Call) RunAndReturn(run func(uuid.UUID) (*models.User, error)) *MockAuthUseCase_SignOut_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: payload
func (_m *MockAuthUseCase) SignUp(payload SignUpRequest) (*models.User, error) {
	ret := _m.Called(payload)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(SignUpRequest) (*models.User, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(SignUpRequest) *models.User); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(SignUpRequest) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthUseCase_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockAuthUseCase_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - payload SignUpRequest
func (_e *MockAuthUseCase_Expecter) SignUp(payload interface{}) *MockAuthUseCase_SignUp_Call {
	return &MockAuthUseCase_SignUp_Call{Call: _e.mock.On("SignUp", payload)}
}

func (_c *MockAuthUseCase_SignUp_Call) Run(run func(payload SignUpRequest)) *MockAuthUseCase_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(SignUpRequest))
	})
	return _c
}

func (_c *MockAuthUseCase_SignUp_Call) Return(_a0 *models.User, _a1 error) *MockAuthUseCase_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthUseCase_SignUp_Call) RunAndReturn(run func(SignUpRequest) (*models.User, error)) *MockAuthUseCase_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthUseCase creates a new instance of MockAuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUseCase {
	mock := &MockAuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
