version: "2.1"

orbs:
  nx: nrwl/nx@1.6.1
  sonarcloud: sonarsource/sonarcloud@1.1.1

jobs:
  agent:
    docker:
      - image: cimg/node:lts-browsers
    parameters:
      ordinal:
        type: integer
    steps:
      - checkout

      - run:
          name: Install PNPM
          command: npm install --prefix=$HOME/.local -g pnpm@8.2.0
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - run:
          name: Start the agent << parameters.ordinal >>
          command: pnpm exec nx-cloud start-agent
          no_output_timeout: 60m

  main:
    docker:
      - image: cimg/node:lts-browsers
    environment:
      NX_CLOUD_DISTRIBUTED_EXECUTION: 'true'
    steps:
      - checkout

      - run:
          name: Install PNPM
          command: npm install --prefix=$HOME/.local -g pnpm@8.2.0
      - run:
          name: Install dependencies
          command: pnpm install --frozen-lockfile
      - nx/set-shas:
          main-branch-name: 'main'
      - run:
          name: Initialize the Nx Cloud distributed CI run
          command: pnpm exec nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      - run:
          name: Check format
          command: pnpm exec nx-cloud record -- pnpm exec nx format:check --base=$NX_BASE --head=$NX_HEAD
      - run:
          name: Run lint
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint --parallel=3
      - run:
          name: Run test
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --parallel=3 --ci --code-coverage
      - run:
          name: Run build
          command: pnpm exec nx affected --base=$NX_BASE --head=$NX_HEAD --target=build --parallel=3
      - run:
          name: Stop all agents
          command: pnpm exec nx-cloud stop-all-agents
          when: always

  lint:
    docker:
      - image: golangci/golangci-lint:v1.53.3
    working_directory: ~/project/apps/api
    steps:
      - checkout

      - run: golangci-lint run ./... --out-format=checkstyle --print-issued-lines=false --print-linter-name=false --issues-exit-code=0 --enable=revive > golanci-report.xml
      - persist_to_workspace:
          root: ~/project
          paths:
            - golanci-report.xml

  test_and_coverage:
    docker:
      - image: cimg/go:1.20.5
    working_directory: ~/project/apps/api
    steps:
      - checkout

      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install dependencies
          command: go get ./...
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Create env file
          command: echo "$ENV_BASE64" | base64 --decode > .env
      - run:
          name: Run unit tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - run:
          name: Run coverage
          command: |
            go test ./... -race -coverprofile=coverage.out -json > report.json
      - persist_to_workspace:
          root: ~/project/apps/api
          paths:
            - coverage.out
            - report.json

  build:
    docker:
      - image: cimg/go:1.20.5
    working_directory: ~/project/apps/api
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install dependencies
          command: go get ./...
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Create env file
          command: echo "$ENV_BASE64" | base64 --decode > .env
      - run:
          name: Run Build
          command: |
            mkdir -p /tmp/artifacts/build
            make build-api
            mv ./dist/apps/api /tmp/artifacts/build
      - store_artifacts:
          path: /tmp/artifacts/build

  sonar:
    docker:
      - image: cimg/go:1.20.5
    working_directory: ~/project/apps/api
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/apps/api
      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN

workflows:
  version: 2

  ci:
    jobs:
      - agent:
          name: Nx Cloud Agent << matrix.ordinal >>
          matrix:
            parameters:
              ordinal: [ 1, 2, 3 ]
      - main:
          name: Nx Cloud Main
      - lint:
          name: API Check Style
      - test_and_coverage:
          name: API Test and Coverage
      - sonar:
          requires:
            - lint
            - test_and_coverage
      - build:
          name: API Build
          requires:
            - sonar
