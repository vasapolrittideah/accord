// Code generated by mockery v2.30.1. DO NOT EDIT.

package repository

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	models "github.com/vasapolrittideah/accord/apps/api/models"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *MockUserRepository) CreateUser(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user models.User
func (_e *MockUserRepository_Expecter) CreateUser(user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(user models.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 models.User, _a1 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(models.User) (models.User, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: id
func (_m *MockUserRepository) DeleteUser(id uuid.UUID) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) DeleteUser(id interface{}) *MockUserRepository_DeleteUser_Call {
	return &MockUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUserRepository_DeleteUser_Call) Run(run func(id uuid.UUID)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) Return(user models.User, err error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) RunAndReturn(run func(uuid.UUID) (models.User, error)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *MockUserRepository) GetAllUsers() ([]models.User, error) {
	ret := _m.Called()

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserRepository_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) GetAllUsers() *MockUserRepository_GetAllUsers_Call {
	return &MockUserRepository_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *MockUserRepository_GetAllUsers_Call) Run(run func()) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_GetAllUsers_Call) Return(users []models.User, err error) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserRepository_GetAllUsers_Call) RunAndReturn(run func() ([]models.User, error)) *MockUserRepository_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockUserRepository) GetByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepository_Expecter) GetByEmail(email interface{}) *MockUserRepository_GetByEmail_Call {
	return &MockUserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockUserRepository_GetByEmail_Call) Run(run func(email string)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) Return(user models.User, err error) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) RunAndReturn(run func(string) (models.User, error)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: id
func (_m *MockUserRepository) GetUser(id uuid.UUID) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) GetUser(id interface{}) *MockUserRepository_GetUser_Call {
	return &MockUserRepository_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserRepository_GetUser_Call) Run(run func(id uuid.UUID)) *MockUserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_GetUser_Call) Return(user models.User, err error) *MockUserRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUser_Call) RunAndReturn(run func(uuid.UUID) (models.User, error)) *MockUserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: id, newData
func (_m *MockUserRepository) UpdateUser(id uuid.UUID, newData models.User) (models.User, error) {
	ret := _m.Called(id, newData)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.User) (models.User, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.User) models.User); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, models.User) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id uuid.UUID
//   - newData models.User
func (_e *MockUserRepository_Expecter) UpdateUser(id interface{}, newData interface{}) *MockUserRepository_UpdateUser_Call {
	return &MockUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, newData)}
}

func (_c *MockUserRepository_UpdateUser_Call) Run(run func(id uuid.UUID, newData models.User)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(models.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) Return(user models.User, err error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) RunAndReturn(run func(uuid.UUID, models.User) (models.User, error)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
